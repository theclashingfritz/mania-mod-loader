#pragma once
#include <cstdio>
#include "MemAccess.h"

static const int ModLoaderVer = 1;
static const int GameVer = 4;

struct PatchInfo
{
	void *address;
	const void *data;
	int datasize;
};

struct PatchList
{
	const PatchInfo *Patches;
	int Count;
};

struct PointerInfo
{
	void *address;
	void *data;
};

struct PointerList
{
	const PointerInfo *Pointers;
	int Count;
};

typedef void(__cdecl *ModInitFunc)(const char *path);

typedef void(__cdecl *ModEvent)();

struct ModInfo
{
	int LoaderVersion;
	int GameVersion;
};

typedef uint32_t _DWORD;
typedef uint16_t _WORD;
typedef uint8_t _BYTE;

enum ShieldTypes
{
	ShieldTypes_None,
	ShieldTypes_Regular,
	ShieldTypes_Bubble,
	ShieldTypes_Flame,
	ShieldTypes_Lightning
};

enum Characters
{
	Characters_None		= 0b00000,
	Characters_Sonic	= 0b00001,
	Characters_Tails	= 0b00010,
	Characters_Knuckles = 0b00100,
	Characters_Mighty	= 0b01000,
	Characters_Ray		= 0b10000
};

struct fileinfo
{
	FILE *file;
	_DWORD dword4;
	_BYTE gap8[16384];
	_DWORD fileoff;
	_DWORD size;
	_DWORD dword4010;
	_DWORD dword4014;
	_DWORD dword4018;
	_DWORD dword401C;
	_DWORD encrypted;
	_DWORD dword4024;
	_BYTE decryptionkey[32];
	_WORD word4048;
	_BYTE byte404A;
};

struct fileheader
{
	int filenamehash[4];
	int offset;
	int size;
	int encrypted;
	char index;
	char anonymous_8[3];
};

struct DebugModeObject {
	_WORD objectID;
	_WORD debugObjectIDArray[257];
	void *debugSpawnArray[514];
	_WORD field_A16;
	_WORD field_A0E;
	_DWORD field_A1C;
	_DWORD field_A20;
	_DWORD field_BDH;
	_DWORD field_KJH;
	_DWORD debugObjectSpawnArrayCount;
	_WORD field_A28;
	_WORD field_A26;
	_WORD field_A2C;
	_WORD field_A2J;
};

struct MotobugObject {
	_WORD objectID;
	_WORD word2;
	_WORD word4;
	_WORD word6;
	_WORD word8;
	_WORD wordA;
	_WORD spriteIndex;
};

// TODO: Finish finding the offsets for the new structure.
struct PlayerObjectMem {
	_DWORD x;
	_DWORD y;
	_WORD spriteSizeX;
	_WORD animationType;
	_WORD spriteSizeY;
	_WORD actionSpriteIndex2;
	_DWORD playerCurrentXSpeed;
	_DWORD playerCurrentYSpeed;
	_DWORD field_17;
	_DWORD field_18;
	_DWORD playerAngle;
	_DWORD field_20;
	_DWORD field_21;
	_DWORD groundVel;
	_DWORD field_23;
	_WORD field_34;
	_WORD objectID;
	_BYTE isOnScreen;
	char field_39;
	char field_3A;
	char field_3B;
	_DWORD field_27;
	_DWORD dword40;
	_DWORD dword41;
	_DWORD onGround;
	_BYTE byte49;
	_BYTE facingDirectionLeft;
	_BYTE isFacingLeft;
	_BYTE collisionType;
	_BYTE field_52;
	unsigned __int8 field_56;
	unsigned __int8 collisionMode;
	char field_530;
	_DWORD field_4E;
	void *objectStatePointer;
	_DWORD field_50;
	_DWORD spawnState;
	char field_99;
	_WORD field_65;
	char field_67;
	_DWORD field_53;
	_DWORD field_54;
	_WORD field_55;
	char field_72;
	char field_73;
	void *playerDataP;
	_DWORD field_59;
	_WORD SSCameraHeight;
	char field_7E;
	char field_7F;
	_DWORD field_5B;
	_DWORD field_5C;
	_DWORD field_5D;
	_DWORD field_5E;
	_DWORD field_5F;
	_DWORD field_60;
	_DWORD field_61;
	_WORD SSPlayerWidth;
	_BYTE field_63;
	_BYTE field_64;
	_DWORD dword98;
	_DWORD dword9C;
	_DWORD dwordA0;
	_DWORD dwordA1;
	_WORD playerSpriteIndex;
	_WORD playerSpriteIndexHasTails;
	_WORD wordA4;
	_WORD field_B6;
	_DWORD hitboxValue;
	_DWORD dwordAB;
	_WORD characterID;
	_WORD field_C2;
	_DWORD rings;
	_DWORD ringCount;
	_DWORD shieldType;
	_BYTE lives;
	_BYTE WeirdTextThing;
	_WORD WeirdTextThing2;
	_DWORD score;
	_DWORD dwordD8;
	_DWORD hyperRingStatus;
	_DWORD idleTimerIdleAnimation;
	_DWORD idleTimerImOuttaHere;
	_BYTE isFlyingIn;
	_BYTE byteE9;
	_BYTE spindashRevCount;
	_BYTE byteEB;
	_DWORD dwordEC;
	_DWORD dwordF0;
	_DWORD AirLeft;
	_DWORD invincibilityTimerSSPlayerHeightY;
	_WORD speedShoesTimer;
	_WORD wordFE;
	_WORD damageBlinkTimer;
	char field_102;
	char field_103;
	_DWORD dword104;
	_DWORD dword108;
	_DWORD dword10C;
	_DWORD dword110;
	_DWORD dword114;
	_DWORD dword118;
	_DWORD dataLoaded;
	_DWORD dword120;
	_DWORD superStatus;
	_DWORD dword128;
	_DWORD groundSpeed;
	_DWORD dword130;
	_DWORD interactStatus;
	_BYTE gap138;
	_BYTE gap139;
	_BYTE gap13A;
	char field_13B;
	_DWORD dword13C;
	_DWORD dword140;
	_DWORD dword144;
	_DWORD dword14C;
	_WORD generalAcceleration;
	_BYTE speedLimit;
	char field_14F;
	_WORD groundAcceleration;
	_WORD word154;
	_WORD airAcceleration;
	char field_156;
	char field_157;
	_DWORD dword16F;
	_BYTE byte170;
	_BYTE airAcceleration2;
	char field_15E;
	char field_15F;
	_DWORD dword172;
	_DWORD dword176;
	_DWORD dword180;
	_DWORD dword184;
	_DWORD dword188;
	_DWORD dword192;
	_DWORD dword19F;
	_DWORD dword190;
	_DWORD dword194;
	_DWORD dword198;
	_DWORD dword19C;
	_DWORD dword200;
	int field_190;
	int field_194;
	_DWORD dword20C;
	void *unknown_function_pointer;
	_DWORD key1;
	_DWORD playerIndex;
	_DWORD key3;
	_DWORD key4;
	_DWORD key5;
	_DWORD key6;
	_DWORD key7;
	_DWORD key8;
	int field_1C0;
	int field_1C4;
	int field_1C8;
	int field_1CC;
	int field_1D0;
	int field_1D4;
	int field_1D8;
	int field_1DC;
	int field_1E0;
	int field_1E4;
	int field_1E8;
	int field_1EC;
	int field_1F0;
	int field_1F4;
	int field_1F8;
	int field_1FC;
	int field_200;
	int field_204;
	int field_208;
	int field_20C;
	int field_210;
	int field_214;
	int field_218;
	int field_21C;
	int field_220;
	int field_224;
	int field_228;
	int field_22C;
	int field_230;
	int field_234;
	int field_238;
	int field_23C;
	int field_240;
	int field_244;
	int field_248;
	int field_24C;
	int field_250;
	int field_254;
	int field_258;
	int field_25C;
	int field_260;
	int field_264;
	int field_268;
	int field_26C;
	int field_270;
	int field_274;
	int field_278;
	int field_27C;
	int field_280;
	int field_284;
	int field_288;
	int field_28C;
	int field_290;
	int field_294;
	int field_298;
	int field_29C;
	int field_2A0;
	int field_2A4;
	int field_2A8;
	int field_2AC;
	int field_2B0;
	int field_2B4;
	int field_2B8;
	int field_2BC;
	int field_2C0;
	int field_2C4;
	int field_2C8;
	int field_2CC;
	int field_2D0;
	int field_2D4;
	int field_2D8;
	int field_2DC;
	int field_2E0;
	int field_2E4;
	int field_2E8;
	int field_2EC;
	int field_2F0;
	int field_2F4;
	int field_2F8;
	int field_2FC;
	int field_300;
	int field_304;
	int field_308;
	int field_30C;
	int field_310;
	int field_314;
	int field_318;
	int field_31C;
	int field_320;
	int field_324;
	int field_328;
	int field_32C;
	int field_330;
	int field_334;
	int field_338;
	int field_33C;
	int field_340;
	int field_344;
	int field_348;
	int field_34C;
	int field_350;
	int field_354;
	int field_358;
	int field_35C;
	int field_360;
	int field_364;
	int field_368;
	int field_36C;
	int field_370;
	int field_374;
	int field_378;
	int field_37C;
	int field_380;
	int field_384;
	int field_388;
	int field_38C;
	int field_390;
	int field_394;
	int field_398;
	int field_39C;
	int field_3A0;
	int field_3A4;
	int field_3A8;
	int field_3AC;
	int field_3B0;
	int field_3B4;
	int field_3B8;
	int field_3BC;
	int field_3C0;
	int field_3C4;
	int field_3C8;
	int field_3CC;
	int field_3D0;
	int field_3D4;
	int field_3D8;
	int field_3DC;
	int field_3E0;
	int field_3E4;
	int field_3E8;
	int field_3EC;
	int field_3F0;
	int field_3F4;
	int field_3F8;
	int field_3FC;
	int field_400;
	int field_404;
	int field_408;
	int field_40C;
	int field_410;
	int field_414;
	int field_418;
	int field_41C;
	int field_420;
	int field_424;
	int field_428;
	int field_42C;
	int field_430;
	int field_434;
	int field_438;
	int field_43C;
	int field_440;
	int field_444;
	int field_448;
	int field_44C;
	int field_450;
	void (__cdecl *field_454)();
};

struct PlayerObject {
	PlayerObjectMem mem;
	int field_458;
	int field_45C;
	int field_460;
	int field_464;
	int field_468;
	int field_46C;
	int field_470;
	int field_474;
	int field_478;
	int field_47C;
	int field_480;
	int field_484;
	int field_488;
	int field_48C;
	int field_490;
	int field_494;
	int field_498;
	int field_49C;
	int field_4A0;
	int field_4A4;
	int field_4A8;
	int field_4AC;
	int field_4B0;
	int field_4B4;
	int field_4B8;
	int field_4BC;
	int field_4C0;
	int field_4C4;
	int field_4C8;
	int field_4CC;
	int field_4D0;
	int field_4D4;
	int field_4D8;
	int field_4DC;
	int field_4E0;
	int field_4E4;
	int field_4E8;
	int field_4EC;
	int field_4F0;
	int field_4F4;
	int field_4F8;
	int field_4FC;
	int field_500;
	int field_504;
	int field_508;
	int field_50C;
	int field_510;
	int field_514;
	int field_518;
	int field_51C;
	int field_520;
	int field_524;
	int field_528;
	int field_52C;
	int field_530;
	int field_534;
	int field_538;
	int field_53C;
	int field_540;
	int field_544;
	int field_548;
	int field_54C;
	int field_550;
	int field_554;
	int field_558;
	int field_55C;
	int field_560;
	int field_564;
	int field_568;
	int field_56C;
	int field_570;
	int field_574;
	int field_578;
	int field_57C;
	int field_580;
	int field_584;
	int field_588;
	int field_58C;
	int field_590;
	int field_594;
	int field_598;
	int field_59C;
	int field_5A0;
	int field_5A4;
	int field_5A8;
	int field_5AC;
	int field_5B0;
	int field_5B4;
	int field_5B8;
	int field_5BC;
	int field_5C0;
	int field_5C4;
	int field_5C8;
	int field_5CC;
	int field_5D0;
	int field_5D4;
	int field_5D8;
	int field_5DC;
	int field_5E0;
	int field_5E4;
	int field_5E8;
	int field_5EC;
	int field_5F0;
	int field_5F4;
	int field_5F8;
	int field_5FC;
	int field_600;
	int field_604;
	int field_608;
	int field_60C;
	int field_610;
	int field_614;
	int field_618;
	int field_61C;
	int field_620;
	int field_624;
	int field_628;
	int field_62C;
	int field_630;
	int field_634;
	int field_638;
	int field_63C;
	int field_640;
	int field_644;
	int field_648;
	int field_64C;
	int field_650;
	int field_654;
	int field_658;
	int field_65C;
	int field_660;
	int field_664;
	int field_668;
	int field_66C;
	int field_670;
	int field_674;
	int field_678;
	int field_67C;
	int field_680;
	int field_684;
	int field_688;
	int field_68C;
	int field_690;
	int field_694;
	int field_698;
	int field_69C;
	int field_6A0;
	int field_6A4;
	int field_6A8;
	int field_6AC;
	int field_6B0;
	int field_6B4;
	int field_6B8;
	int field_6BC;
	int field_6C0;
	int field_6C4;
	int field_6C8;
	int field_6CC;
	int field_6D0;
	int field_6D4;
	int field_6D8;
	int field_6DC;
	int field_6E0;
	int field_6E4;
	int field_6E8;
	int field_6EC;
	int field_6F0;
	int field_6F4;
	int field_6F8;
	int field_6FC;
	int field_700;
	int field_704;
	int field_708;
	int field_70C;
	int field_710;
	int field_714;
	int field_718;
	int field_71C;
	int field_720;
	int field_724;
	int field_728;
	int field_72C;
	int field_730;
	int field_734;
	int field_738;
	int field_73C;
	int field_740;
	int field_744;
	int field_748;
	int field_74C;
	int field_750;
	int field_754;
	int field_758;
	int field_75C;
	int field_760;
	int field_764;
	int field_768;
	int field_76C;
	int field_770;
	int field_774;
	int field_778;
	int field_77C;
	int field_780;
	int field_784;
	int field_788;
	int field_78C;
	int field_790;
	int field_794;
	int field_798;
	int field_79C;
	int field_7A0;
	int field_7A4;
	int field_7A8;
	int field_7AC;
	int field_7B0;
	int field_7B4;
	int field_7B8;
	int field_7BC;
	int field_7C0;
	int field_7C4;
	int field_7C8;
	int field_7CC;
	int field_7D0;
	int field_7D4;
	int field_7D8;
	int field_7DC;
	int field_7E0;
	int field_7E4;
	int field_7E8;
	int field_7EC;
	int field_7F0;
	int field_7F4;
	int field_7F8;
	int field_7FC;
	int field_800;
	int field_804;
	int field_808;
	int field_80C;
	int field_810;
	int field_814;
	int field_818;
	int field_81C;
	int field_820;
	int field_824;
	int field_828;
	int field_82C;
	int field_830;
	int field_834;
	int field_838;
	int field_83C;
	int field_840;
	int field_844;
	int field_848;
	int field_84C;
	int field_850;
	int field_854;
	int field_858;
	int field_85C;
	int field_860;
	int field_864;
	int field_868;
	int field_86C;
	int field_870;
	int field_874;
	int field_878;
	int field_87C;
	int field_880;
	int field_884;
	int field_888;
	int field_88C;
	int field_890;
	int field_894;
	int field_898;
	int field_89C;
	int field_8A0;
	int field_8A4;
	int field_8A8;
	int field_8AC;
	int field_8B0;
	int field_8B4;
	int field_8B8;
	int field_8BC;
	int field_8C0;
	int field_8C4;
	int field_8C8;
	int field_8CC;
	int field_8D0;
	int field_8D4;
	int field_8D8;
	int field_8DC;
	int field_8E0;
	int field_8E4;
	int field_8E8;
	int field_8EC;
	int field_8F0;
	int field_8F4;
	int field_8F8;
	int field_8FC;
	int field_900;
	int field_904;
	int field_908;
	int field_90C;
	int field_910;
	int field_914;
	int field_918;
	int field_91C;
	int field_920;
	int field_924;
	int field_928;
	int field_92C;
	int field_930;
	int field_934;
	int field_938;
	int field_93C;
	int field_940;
	_WORD field_944;
	_WORD field_946;
	_WORD field_948;
	_WORD field_94A;
	_WORD field_94C;
	_WORD field_94E;
	int field_950;
	int field_954;
	int field_958;
	int field_95C;
	int field_960;
	int field_964;
	int field_968;
	int field_96C;
	int field_970;
	int field_974;
	int field_978;
	int field_97C;
	int field_980;
	int field_984;
	int field_988;
	int field_98C;
	int field_990;
	int field_994;
	int field_998;
	int field_99C;
	int field_9A0;
	int field_9A4;
	int field_9A8;
	int field_9AC;
	int field_9B0;
	int field_9B4;
	int field_9B8;
	int field_9BC;
	int field_9C0;
	int field_9C4;
	int field_9C8;
	int field_9CC;
	int field_9D0;
	int field_9D4;
	int field_9D8;
	int field_9DC;
	int field_9E0;
	int field_9E4;
	int field_9E8;
	int field_9EC;
	int field_9F0;
	int field_9F4;
	int field_9F8;
	int field_9FC;
	int field_A00;
	int field_A04;
	_WORD sonicBinIndex;
	_WORD superSonicBinIndex;
	_WORD tailsBinIndex;
	_WORD tailSpriteBinIndex;
	_WORD knucklesBinIndex;
	_WORD mightyBinIndex;
	_WORD rayBinIndex;
	_WORD jumpWavIndex;
	_WORD rollWavIndex;
	_WORD chargeWavIndex;
	_WORD releaseWavIndex;
	_WORD peelChargeWavIndex;
	_WORD peelReleaseWavIndex;
	_WORD dropDashWavIndex;
	_WORD loseRingsWavIndex;
	_WORD hurtWavIndex;
	_WORD pimPomWavIndex;
	_WORD skiddingWavIndex;
	_WORD grabWavIndex;
	_WORD flyingWavIndex;
	_DWORD dwordA30;
	_WORD tiredWavIndex;
	_WORD field_A36;
	_DWORD dwordA38;
	_WORD landWavIndex;
	_WORD slideWavIndex;
	_WORD outtaHereWavIndex;
	_WORD transfrom2WavIndex;
	_WORD swapWavIndex;
	_WORD swapFailWavIndex;
	_WORD mightyDeflectWavIndex;
	_WORD mightyDrillWavIndex;
	_WORD mightyLandWavIndex;
	_WORD mightyUnspinWavIndex;
	int field_A50;
	_DWORD dwordA54;
	int field_A58;
	int field_A5C;
	int field_A60;
	int field_A64;
	int field_A68;
	int field_A6C;
	_DWORD dwordA70;
};

struct ObjectSpriteMemStruc {
	_DWORD dword0;
	_DWORD dword4;
	_WORD word8;
	_WORD wordA;
	_WORD wordC;
	_WORD wordE;
	_WORD word10;
	_WORD word12;
	_BYTE byte14;
	_BYTE byte15;
	_WORD field_16;
};

struct GeneralDataStruc {
	PlayerObjectMem *playerObjectMem;
	int field_4;
	int field_8;
	int field_C;
	int field_10;
	int field_14;
	_WORD unkownVar;
	char field_1A;
	char field_1B;
	int field_1C;
	_DWORD doPlayerProbe;
};

// define function and variable pointers here
DataPointer(BYTE, ReadFromPack, 0x6F1804);
DataPointer(BYTE, ConsoleEnabled, 0x6F1806);

DataPointer(float, MusicVolume, 0xE4805C);
DataPointer(int, TimerCentiframes, 0xE4874D);
DataPointer(int, DebugEnabled, 0xE48768);
DataPointer(int, UpdateTimer, 0xE48770);
DataPointer(char, GameMode, 0xE487787);
DataPointer(char, TimerCentiseconds, 0xE48778);
DataPointer(char, TimerSeconds, 0xE48779);
DataPointer(char, TimerMinutes, 0xE4877A);
DataPointer(GeneralDataStruc, GeneralData, 0xE9C5CC);

// These are pointers to the global data for objects. Such as their ID and etc,  
// However the can only be used at runtime.
DataPointer(DebugModeObject, DebugModeObjectP, 0xEBB8C8);
DataPointer(MotobugObject, MotobugObjectP, 0xEBBAF8);
DataPointer(PlayerObject, Player1Object, 0x85E9A0);
DataPointer(PlayerObject, Player2Object, 0x85EDF8);

// If a function has a jump function where the function is just a jump to the proper
// function it should be used whenever possible. These usually stay in the same spots in 
// the same general area between versions and improves the chances of future version
// compatibility. These functions are almost always compiler generated, Hence the close
// proximity.
FunctionPointer(int, playWav, (_WORD wavIndex, int a2, _BYTE playLength), 0x5BBBF0);
FunctionPointer(_WORD, loadWav, (const char *name), 0x5BBB50);

// These functions are a special case. Their jump functions do not align between versions so we'll use their stored 
// jump functions in a stored "offset" which does match between versions. Most functions have these as well 
// but usually isn't needed to get a working function. To make matters worse. Some functions don't have a jump function
// but do have an "offset". Meaning we'll need 2 different ways to get these and those for multi-version support,
// and to make things worse. The "offsets" are dynamically set, We'll have to use them only in runtime.
OffsetFunctionPointer(void *, spawnObject, (_WORD objectID, _DWORD type, _DWORD x, _DWORD y), 0xE9C700); // It's return is a object unique pointer to the object's memory.
OffsetFunctionPointer(int, PrintDebug, (const char *fmt, ...), 0xE9C968);
OffsetFunctionPointer(bool, checkStageName, (const char *name), 0xE9C72C);
OffsetFunctionPointer(_WORD, loadBin, (const char *binPath), 0xE9C880);
OffsetFunctionPointer(void, setObjectSprite, (_WORD spriteIndex, _WORD a2, ObjectSpriteMemStruc *a3, int a4, int a5), 0xE9C888);
OffsetFunctionPointer(void, debugObjectChangeState, (void *unknown1, PlayerObjectMem *objectMem, int a3), 0xE9C83C);

VoidFunc(InitPlayer, 0x4C33F0);
FastcallFunctionPointer(int, Player_CheckGoSuper, (PlayerObjectMem *a1, int emeraldflags), 0x4C8280);
VoidFunc(Sonic_JumpAbilities, 0x4C8630);
VoidFunc(Tails_JumpAbilities, 0x4C8990);
VoidFunc(Knuckles_JumpAbilities, 0x4C8A70);
VoidFunc(Mighty_JumpAbilities, 0x4C8B70);
VoidFunc(Ray_JumpAbilities, 0x4C8DF0);
VoidFunc(Sonic_CheckDoPeelOut, 0x4C8FF0);
VoidFunc(ERZSuperSonic_JumpAbilities, 0x4C2340);
FastcallFunctionPointer(void, HashFilename, (char *filename, int *hash), 0x5CAE80); // Incorrect address on version 1.05.0713 (Before Patch).
FastcallFunctionPointer(int, LoadFile, (char *filename, fileinfo *info), 0x5C4C20); // Incorrect address on version 1.05.0713 (Before Patch).
VoidFunc(MainGameLoop, 0x5C7540); 
//VoidFunc(IncrementTimer, 0x5C74E0);
